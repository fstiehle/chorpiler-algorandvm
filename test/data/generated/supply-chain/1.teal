// Try: Make a function we can jump to 
// that does the recuring consume produce logic
#pragma version 10
#define TOKEN_STATE byte "s"
#define PAR_0 addr XOMFXMKG6LLVQPJLOW4MSGKZHJ4LWJCUU2U2VLXKNK3LAINQPH2ELOAQJ4
#define PAR_1 addr T7UHKQG5AHINW3PL72G4UR3MMBA5LXVHTMSBL6TDUUXBZ5GPLLUHRDT6Z4
#define PAR_2 addr OCKNYHG7YEV5YJNLIG3QSMCCS2SQE5C4VIPAJFFZA4U7AHBTIU76OKUXM4
#define PAR_3 addr 75HBNH73Z7FPPXLRJNDV6JLBQVKEODUNB6EKSZZMU4SQU7MK6BL2L5RI7Q
#define PAR_4 addr 2SP7SQUF5HMHZBCT5O7UDAETXBN4YCWBJYHFAB2TLNJ6E5PU7C6TICUJCI

// Check for NoOp
// -------------------
txn OnCompletion
int NoOp
==
bnz main

// Check for Delete
// -------------------
txn OnCompletion
int DeleteApplication
==
bnz delete

err // disallow all other tx types

main:
// Get token state
TOKEN_STATE // needed later
TOKEN_STATE
app_global_get 

// init if necessary
// -------------------
dup 
int 0
==
bnz init


// TASK 0
// --------------------
txna ApplicationArgs 0
btoi
int 0
==
bnz task_0

// TASK 1
// --------------------
txna ApplicationArgs 0
btoi
int 1
==
bnz task_1

// TASK 2
// --------------------
txna ApplicationArgs 0
btoi
int 2
==
bnz task_2

// TASK 3
// --------------------
txna ApplicationArgs 0
btoi
int 3
==
bnz task_3

// TASK 4
// --------------------
txna ApplicationArgs 0
btoi
int 4
==
bnz task_4

// TASK 5
// --------------------
txna ApplicationArgs 0
btoi
int 5
==
bnz task_5

// TASK 6
// --------------------
txna ApplicationArgs 0
btoi
int 6
==
bnz task_6

// TASK 7
// --------------------
txna ApplicationArgs 0
btoi
int 7
==
bnz task_7

// TASK 8
// --------------------
txna ApplicationArgs 0
btoi
int 8
==
bnz task_8

err // fall through

// ----------------------------------------------------------
task_0:
// Check task is enabled
dup // duplicate current token state on stack
int 1
&
int 1
==
// Check participant is allowed
txn Sender 
PAR_0
==

&& // Check previous
assert // return if zero

// consume and produce
int 1
~
&
int 2 
|
b auto_loop
// ----------------------------------------------------------
task_1:
// Check task is enabled
dup // duplicate current token state on stack
int 2
&
int 2
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 2
~
&
int 4 
|
b auto_loop
// ----------------------------------------------------------
task_2:
// Check task is enabled
dup // duplicate current token state on stack
int 8
&
int 8
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 8
~
&
int 0 
|
b auto_loop
// ----------------------------------------------------------
task_3:
// Check task is enabled
dup // duplicate current token state on stack
int 4
&
int 4
==
// Check participant is allowed
txn Sender 
PAR_1
==

&& // Check previous
assert // return if zero

// consume and produce
int 4
~
&
int 16 
|
b auto_loop
// ----------------------------------------------------------
task_4:
// Check task is enabled
dup // duplicate current token state on stack
int 32
&
int 32
==
// Check participant is allowed
txn Sender 
PAR_2
==

&& // Check previous
assert // return if zero

// consume and produce
int 32
~
&
int 8 
|
b auto_loop
// ----------------------------------------------------------
task_5:
// Check task is enabled
dup // duplicate current token state on stack
int 16
&
int 16
==
// Check participant is allowed
txn Sender 
PAR_2
==

&& // Check previous
assert // return if zero

// consume and produce
int 16
~
&
int 64 
|
b auto_loop
// ----------------------------------------------------------
task_6:
// Check task is enabled
dup // duplicate current token state on stack
int 64
&
int 64
==
// Check participant is allowed
txn Sender 
PAR_3
==

&& // Check previous
assert // return if zero

// consume and produce
int 64
~
&
int 128 
|
b auto_loop
// ----------------------------------------------------------
task_7:
// Check task is enabled
dup // duplicate current token state on stack
int 128
&
int 128
==
// Check participant is allowed
txn Sender 
PAR_4
==

&& // Check previous
assert // return if zero

// consume and produce
int 128
~
&
int 256 
|
b auto_loop
// ----------------------------------------------------------
task_8:
// Check task is enabled
dup // duplicate current token state on stack
int 256
&
int 256
==
// Check participant is allowed
txn Sender 
PAR_3
==

&& // Check previous
assert // return if zero

// consume and produce
int 256
~
&
int 32 
|
b auto_loop

// Automatic transitions (need to be looped as more than one could fire)
auto_loop:
// --------------------
// Transition
dup
int 16
&
int 16
==
// Check conditions
txna ApplicationArgs 1
btoi
int 1
&
int 1
==
&&

bnz auto_16

// --------------------
// Transition
dup
int 64
&
int 64
==
// Check conditions
txna ApplicationArgs 1
btoi
int 2
&
int 2
==
&&

bnz auto_64

// --------------------
// Transition
dup
int 4
&
int 4
==
// Check conditions
txna ApplicationArgs 1
btoi
int 4
&
int 4
==
&&

bnz auto_4

// no autonomous transitions to be fired

app_global_put
int 1
return

auto_16:
// consume and produce
int 16
~
&
int 32 
|
b auto_loop
auto_64:
// consume and produce
int 64
~
&
int 256 
|
b auto_loop
auto_4:
// consume and produce
int 4
~
&
int 8 
|
b auto_loop

init:
pop
int 1
app_global_put
int 1
return 

delete:
TOKEN_STATE
app_global_get 
int 0
==