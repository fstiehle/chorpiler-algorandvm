// Try: Make a function we can jump to 
// that does the recuring consume produce logic
#pragma version 10
#define TOKEN_STATE byte "s"
{{#participants}}
#define PAR_{{id}} addr [ADDR_PAR_{{id}}]
{{/participants}}

TOKEN_STATE
// S
TOKEN_STATE
// S, S
app_global_get 
// S, global_tokenState
dup 
// S, global_tokenState, global_tokenState
int 0
// S, global_tokenState, global_tokenState, 0
==
// S, global_tokenState, Int
bnz init
// S, global_tokenState

// main
// -------------------------------------------------------------
{{#manualTransitions}}

// TASK {{id}}
// --------------------
txna ApplicationArgs 0
btoi
int {{id}}
==
bnz task_{{id}}
{{/manualTransitions}}

// fall through
int 0
return

{{#manualTransitions}}

task_{{id}}:
// Check task is enabled
// S, global_tokenState
dup
// S, global_tokenState, global_tokenState, global_tokenState
int {{consume}}
// S, global_tokenState, global_tokenState, global_tokenState, 1
&
// S, global_tokenState, global_tokenState, Int
int {{consume}}
==
// S, global_tokenState, Int
// Check participant is allowed
txn Sender // Read Sender
// S, global_tokenState, Int, addr
PAR_{{initiator}}
// S, global_tokenState, Int, addr, addr
==
// S, global_tokenState, Int, Int
// Check previous conditions
&& 
// S, global_tokenState, Int
assert // return if zero
// S, global_tokenState

int {{consume}}
// S, global_tokenState, consuming token ID
~
// S, global_tokenState, Int
&
// S, Int
int {{produce}} 
// S, Int, producing token ID
|
// S, to_be_global_tokenState
b auto_loop
{{/manualTransitions}}

// Automatic transitions (need to be looped as more than one could fire)
auto_loop:
{{#autonomousTransitions}}
// --------------------
// Transition
// S, to_be_global_tokenState
dup
// S, to_be_global_tokenState, to_be_global_tokenState
int {{consume}}
// S, global_tokenState, global_tokenState, global_tokenState, 1
&
// S, global_tokenState, global_tokenState, Int
int {{consume}}
==
// S, to_be_global_tokenState, Int
bnz auto_{{consume}}
// S, to_be_global_tokenState

{{/autonomousTransitions}}
// no autonomous transitions to be fired
// check for end (state == 0)
dup
// S, to_be_global_tokenState, to_be_global_tokenState
bz end
// S, to_be_global_tokenState
// return success
app_global_put
int 1
return

{{#autonomousTransitions}}
auto_{{consume}}:
int {{consume}}
// S, global_tokenState, 2
~
// S, global_tokenState, Int
&
// S, Int
int {{produce}} 
// S, Int, 4
|
// S, to_be_global_tokenState
b auto_loop
{{/autonomousTransitions}}

init:
// S, global_tokenState
pop
// S
int 1
// S, 1
app_global_put
// ...
int 1
// 1
return 

end:
// S, to_be_global_tokenState
pop
app_global_del
int 1
return