// Try: Make a function we can jump to 
// that does the recuring consume produce logic
#pragma version 10
#define TOKEN_STATE byte "s"
{{#participants}}
#define PAR_{{id}} addr [ADDR_PAR_{{id}}]
{{/participants}}

txn OnCompletion
int UpdateApplication
==
bnz update

TOKEN_STATE // needed later
TOKEN_STATE
app_global_get 

txn OnCompletion
int DeleteApplication
==
bnz delete

// init if necessary
// -------------------
dup 
int 0
==
bnz init

// main
// -------------------------------------------------------------
{{#manualTransitions}}

// TASK {{id}}
// --------------------
txna ApplicationArgs 0
btoi
int {{id}}
==
bnz task_{{id}}
{{/manualTransitions}}

// fall through
int 0
return

{{#manualTransitions}}
// ----------------------------------------------------------
task_{{id}}:
// Check task is enabled
// -------------------
dup // duplicate current token state on stack
int {{consume}}
&
int {{consume}}
==
{{#condition}}
// Check conditions
// -------------------
txna ApplicationArgs 1
btoi
int {{condition}}
&
int {{condition}}
==
&&
{{/condition}}
// Check participant is allowed
// -------------------
txn Sender 
PAR_{{initiator}}
==

&& // Check previous
assert // return if zero

// consume and produce
// -------------------
int {{consume}}
~
&
int {{produce}} 
|
b auto_loop
{{/manualTransitions}}

// Automatic transitions (need to be looped as more than one could fire)
auto_loop:
{{#autonomousTransitions}}
// --------------------
// Transition
dup
int {{consume}}
&
int {{consume}}
==
{{#condition}}
// Check conditions
// -------------------
txna ApplicationArgs 1
btoi
int {{condition}}
&
int {{condition}}
==
&&
{{/condition}}
// S, to_be_global_tokenState, Int
bnz auto_{{consume}}
// S, to_be_global_tokenState

{{/autonomousTransitions}}
// no autonomous transitions to be fired
dup
// S, to_be_global_tokenState, to_be_global_tokenState
bz end
// S, to_be_global_tokenState
// return success
app_global_put
int 1
return

{{#autonomousTransitions}}
auto_{{consume}}:
int {{consume}}
// S, global_tokenState, 2
~
// S, global_tokenState, Int
&
// S, Int
int {{produce}} 
// S, Int, 4
|
// S, to_be_global_tokenState
b auto_loop
{{/autonomousTransitions}}

init:
// S, global_tokenState
pop
// S
int 1
// S, 1
app_global_put
// ...
int 1
// 1
return 

end:
// S, to_be_global_tokenState
pop
app_global_del
int 1
return

delete:
dup 
int 0
==

update:
int 0